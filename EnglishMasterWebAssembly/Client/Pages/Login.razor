@page "/Login"
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using EnglishMasterWebAssembly.Shared.Models
@using Newtonsoft.Json
<div class="login-area">
    <h3 class="text-center">Login</h3>
    <div class="input-area">
        <span>Username</span>
        <input type="text" @bind="Username" />
    </div>
    <div class="input-area">
        <span>Password</span>
        <input type="password" @bind="Password" />
    </div>
    <button class="btn-base" style="border:none;margin-top:10px;" @onclick="@LoginButtonOnClick">Login</button>
    <div class="text-secondary text-center" style="margin:10px;">or</div>
    <div class="text-center">
        <a class="text-secondary" href="#">Register</a>
    </div>
    <div class="alert-danger text-center">@Message</div>
</div>
@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string? RedirectURL { get; set; }
    private string Message = "";
    private string Password = "";
    private string Username = "";
    private async Task LoginButtonOnClick()
    {
        Message = "";
        var user = new User
            {
                Username = Username,
                Password = Password
            };
        HttpContent content = new StringContent(JsonConvert.SerializeObject(user), System.Text.Encoding.UTF8, "application/json");
        HttpResponseMessage response = await Http.PostAsync("user/post/login", content);
        var result = await response.Content.ReadAsStringAsync();
        if (result.Contains("Authentication failed."))
        {
            Message = result;
            return;
        }
        else
        {
            await localStorage.SetItemAsync<long>("USER_ID", long.Parse(result));
            navigationManager.NavigateTo(RedirectURL, true);
        }
    }

}

