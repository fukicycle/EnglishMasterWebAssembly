@page "/wordQuestion"
@using EnglishMasterWebAssembly.Shared.Models
@using System.Timers
@using Newtonsoft.Json
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
<PageTitle>Word</PageTitle>
<div class="container">
    <div class="content-area">
        <div class="spinner-area">
            <p>問題数</p>
            <select @onchange="@LimitChanged">
                @for (int i = 25; i <= 100; i += 25)
                {
                    @if (Limit == i)
                    {
                        <option selected value="@i">@i</option>
                    }
                    else
                    {
                        <option value="@i">@i</option>
                    }
                }
            </select>
            <p>レベル</p>
            <select @onchange="@LevelChanged">
                @foreach (var item in _levelList)
                {
                    if (LevelId == item.Id)
                    {
                        <option selected value="@item.Id">@item.Name</option>
                    }
                    else
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
            </select>
            <p>品詞</p>
            <select @onchange="@PartOfSpeechChanged">
                @foreach (var item in _partOfSpeechList)
                {
                    if (PartOfSpeechId == item.Id)
                    {
                        <option selected value="@item.Id">@item.InJapanese</option>
                    }
                    else
                    {
                        <option value="@item.Id">@item.InJapanese</option>
                    }
                }
            </select>
        </div>
        <div class="question-area">
            @if (_wordList == null || _questions == null)
            {
                <p class="question">Loading...</p>
                <hr />
                <p class="count">0/0</p>
            }
            else
            {
                if (_isEnd)
                {
                    <p class="question">Completed!</p>
                    <p>-</p>
                    <hr />
                    <p class="count">@(_idx + 1)/@_questions.Count</p>
                }
                else if (_isPass == null)
                {
                    <p class="question">@(_wordList.FirstOrDefault(a => a.Id == _question.WordId)?.Word1 ?? "No word")</p>
                    <p>-</p>
                    <hr />
                    <p class="count">@(_idx + 1)/@_questions.Count</p>
                }
                else if (_isPass == true)
                {
                    <p class="question">@(_wordList.FirstOrDefault(a => a.Id == _question.WordId)?.Word1 ?? "No word")</p>
                    <p class="text-success">Correct !</p>
                    <hr />
                    <p class="count">@(_idx + 1)/@_questions.Count</p>
                }
                else
                {
                    <p class="question">@(_wordList.FirstOrDefault(a => a.Id == _question.WordId)?.Word1 ?? "No word")</p>
                    <p class="text-danger">Incorrect !</p>
                    <hr />
                    <p class="count">@(_idx + 1)/@_questions.Count</p>
                }
            }
        </div>
        <div class="answer-area">
            @if (_isLoad)
            {
                <div class="box">
                    <div class="cat">
                        <div class="cat__body"></div>
                        <div class="cat__body"></div>
                        <div class="cat__tail"></div>
                        <div class="cat__head"></div>
                    </div>
                </div>
            }
            else
            {
                @if (_question.WordId != 0)
                {
                    @if (_isEnd)
                    {
                        <button class="btn-base" @onclick="ReturnButtonOnClick">Result</button>
                    }
                    else
                    {
                        @foreach (var item in _answerList)
                        {
                            <button class="btn-base" @onclick="@(() => AnswerButtonOnClick(item.Id))" disabled="@(_isPass != null)">@item.Meaning</button>
                        }
                    }
                }
            }
        </div>
    </div>
</div>
@code {
    private List<Level> _levelList = new();
    private List<MeaningOfWord> _meaningOfWordList = new();
    private List<Word> _wordList = new();
    private List<PartOfSpeech> _partOfSpeechList = new();
    private List<MeaningOfWord> _questions = new();
    private MeaningOfWord _question = new();
    private List<MeaningOfWord> _answerList = new();
    private int _idx = 0;
    private bool? _isPass = null;
    private bool _isEnd = false;
    private bool _isLoad = false;
    private Dictionary<long, bool> _result = new Dictionary<long, bool>();
    private User? _user;

    [SupplyParameterFromQuery]
    [Parameter]
    public long LevelId { get; set; } = 0;
    [SupplyParameterFromQuery]
    [Parameter]
    public long PartOfSpeechId { get; set; } = 0;
    [SupplyParameterFromQuery]
    [Parameter]
    public int Limit { get; set; } = 25;

    private int _totalAnswerCount = 0;
    private int _totalCorrectCount = 0;
    private int _totalIncorrectCount = 0;

    protected override async Task OnInitializedAsync()
    {
        _isLoad = true;
        _levelList = await http.GetFromJsonAsync<List<Level>>("Level") ?? new();
        _wordList = await http.GetFromJsonAsync<List<Word>>("Word") ?? new();
        _partOfSpeechList = await http.GetFromJsonAsync<List<PartOfSpeech>>("PartOfSpeech") ?? new();
        _meaningOfWordList = await http.GetFromJsonAsync<List<MeaningOfWord>>("MeaningOfWord") ?? new();
        if (PartOfSpeechId == 0)
            PartOfSpeechId = _partOfSpeechList.First().Id;
        if (LevelId == 0)
            LevelId = _levelList.First().Id;
        if (Limit == 0)
            Limit = 25;
        CreateQuestions();
        _totalAnswerCount = await localStorage.GetItemAsync<int>("ALL_COUNT");
        _totalCorrectCount = await localStorage.GetItemAsync<int>("CORRECT_COUNT");
        _totalIncorrectCount = await localStorage.GetItemAsync<int>("IN_CORRECT_COUNT");
        _user = await UserInfo.GetUserInfo(localStorage, http);
        _isLoad = false;
    }

    private void MoveNext()
    {
        if (_questions.Count == 0) return;
        _isPass = null;
        _idx = _idx + 1;
        if (_idx >= _questions.Count)
        {
            _isEnd = true;
            _idx = _questions.Count - 1;
        }
        else
        {
            _question = _questions[_idx];
            _answerList = _meaningOfWordList.GetAnswer(_question).ToList();
        }
    }

    private void ParameterChanged()
    {
        Dictionary<string, object?> parameters = new Dictionary<string, object?>();
        parameters.Add(nameof(LevelId), LevelId);
        parameters.Add(nameof(PartOfSpeechId), PartOfSpeechId);
        parameters.Add(nameof(Limit), Limit);
        navigationManager.NavigateTo(navigationManager.GetUriWithQueryParameters(parameters));

    }

    private void LimitChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (value is null) return;
        Limit = int.Parse(value);
        ParameterChanged();
        CreateQuestions();
    }

    private void LevelChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (value is null) return;
        LevelId = int.Parse(value);
        ParameterChanged();
        CreateQuestions();
    }

    private void PartOfSpeechChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (value is null) return;
        PartOfSpeechId = int.Parse(value);
        ParameterChanged();
        CreateQuestions();
    }

    private long prevAnswerId = 0;
    private async Task AnswerButtonOnClick(long id)
    {
        _isPass = null;
        if (prevAnswerId != id)
        {
            prevAnswerId = id;
            _totalAnswerCount++;
            await localStorage.SetItemAsync<int>("ALL_COUNT", _totalAnswerCount);
            if (_question.Id == id)
            {
                _totalCorrectCount++;
                await localStorage.SetItemAsync<int>("CORRECT_COUNT", _totalCorrectCount);
            }
            else
            {
                _totalIncorrectCount++;
                await localStorage.SetItemAsync<int>("IN_CORRECT_COUNT", _totalIncorrectCount);
            }
            SubmitResult(id);
        }
        _isPass = _question.Id == id;
        StateHasChanged();
        await Task.Delay(200);
        MoveNext();
    }

    private void CreateQuestions()
    {
        _isPass = null;
        _idx = 0;
        _questions = _meaningOfWordList.Where(a => a.PartOfSpeechId == PartOfSpeechId && a.LevelId == LevelId).GetQuestions().Take(Limit).ToList();
        if (_questions.Count > 0)
            _question = _questions[_idx];
        else
            _question = new MeaningOfWord();
        _answerList = _meaningOfWordList.GetAnswer(_question).ToList();
    }

    private void ReturnButtonOnClick()
    {
        if (_user is not null)
        {
            var queryParameter = new Dictionary<string, string>
                {
                    ["count"] = Limit.ToString(),
                    ["userId"] = _user.Id.ToString()
                };
            navigationManager.NavigateTo(QueryHelpers.AddQueryString("Result", queryParameter));
        }
    }

    private async void SubmitResult(long id)
    {
        if (_user is null) return;
        MeaningOfWordLearningHistory meaningOfWordLearningHistory = new MeaningOfWordLearningHistory
            {
                QuestionMeaningOfWordId = _question.Id,
                AnswerMeaningOfWordId = id,
                Date = DateTime.Now,
                UserId = _user.Id,
                IsDone = _question.Id == id
            };
        await http.PostAsJsonAsync(nameof(MeaningOfWordLearningHistory), meaningOfWordLearningHistory);
    }
}
