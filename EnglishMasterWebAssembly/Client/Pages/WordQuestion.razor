@page "/WordQuestion"
@using EnglishMasterWebAssembly.Shared.Models
@using System.Timers
@using Newtonsoft.Json
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
<PageTitle>Word</PageTitle>
<div class="container">
    <div class="content-area">
        <div class="spinner-area">
            @*<p>モード</p>
        <select @onchange="@ModeChanged" disabled="@Timer.Enabled">
            @if (Mode == "練習")
            {
                <option selected>練習</option>
                <option>試験</option>

            }
            else
            {
                <option>練習</option>
                <option selected>試験</option>
            }
        </select>*@
            <p>レベル</p>
            @*<select @onchange="@LevelChanged" disabled="@Timer.Enabled">*@
                <select @onchange="@LevelChanged">
                    @foreach (var item in LevelList)
                    {
                        if (LevelId == item.Id)
                        {
                            <option selected value="@item.Id">@item.Name</option>
                        }
                        else
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
                <p>品詞</p>
                @*<select @onchange="@PartOfSpeechChanged" disabled="@Timer.Enabled">*@
                <select @onchange="@PartOfSpeechChanged">
                    @foreach (var item in PartOfSpeechList)
                    {
                        if (PartOfSpeechId == item.Id)
                        {
                            <option selected value="@item.Id">@item.InJapanese</option>
                        }
                        else
                        {
                            <option value="@item.Id">@item.InJapanese</option>
                        }
                    }
                </select>
        </div>
        <div class="question-area">
            @if (WordList == null || Questions == null)
            {
                <p class="question">Loading...</p>
                <hr />
                <p class="count">0/0</p>
            }
            else
            {
                if (IsEnd)
                {
                    <p class="question">Completed!</p>
                    <p>-</p>
                    <hr />
                    <p class="count">@(Idx + 1)/@Questions.Count</p>
                }
                else if (IsPass == null)
                {
                    @*if (IsTest)
                    {
                        if (Timer.Enabled)
                        {
                            <p class="question">@(WordList.FirstOrDefault(a => a.Id == Question.WordId)?.Word1 ?? "No word")</p>
                            <p>@LimitTime.ToString(@"mm\:ss")</p>
                            <hr />
                            <p class="count">@(Idx + 1)/@Questions.Count</p>
                        }
                        else
                        {
                            <p class="question">Please click the start!</p>
                            <p>@LimitTime.ToString(@"mm\:ss")</p>
                            <hr />
                            <p class="count">@(Idx + 1)/@Questions.Count</p>

                        }
                    }
                    else
                    {*@
                        <p class="question">@(WordList.FirstOrDefault(a => a.Id == Question.WordId)?.Word1 ?? "No word")</p>
                        <p>-</p>
                        <hr />
                        <p class="count">@(Idx + 1)/@Questions.Count</p>
                        //}
                    }
                else if (IsPass == true)
                {
                    <p class="question">@(WordList.FirstOrDefault(a => a.Id == Question.WordId)?.Word1 ?? "No word")</p>
                    <p class="text-success">Correct !</p>
                    <hr />
                    <p class="count">@(Idx + 1)/@Questions.Count</p>
                }
                else
                {
                    <p class="question">@(WordList.FirstOrDefault(a => a.Id == Question.WordId)?.Word1 ?? "No word")</p>
                    <p class="text-danger">Incorrect !</p>
                    <hr />
                    <p class="count">@(Idx + 1)/@Questions.Count</p>
                }
            }
        </div>
        <div class="answer-area">
            @if (IsLoad)
            {
                <div class="spinner-border"></div>
            }
            else
            {
                @if (Question.WordId != 0)
                {
                    @*@if (IsTest && !IsEnd && !Timer.Enabled)
                {
                    <button class="btn-base" @onclick="StartButtonOnClick">Start</button>
                }
                else if (!IsEnd)
                {
                    @foreach (var item in AnswerList)
                    {
                        <button class="btn-base" @onclick="@(() => AnswerButtonOnClick(item.Id))">@item.Meaning</button>
                    }
                }
                else
                {
                    if (IsTest)
                    {
                        <button class="btn-base" @onclick="@(() => navigationManager.NavigateTo("./Result"))">Show Result</button>
                    }
                    else
                    {
                        <button class="btn-base" @onclick="ReturnButtonOnClick">Return top</button>
                    }
                }*@
                    @if (IsEnd)
                    {
                        <button class="btn-base" @onclick="ReturnButtonOnClick">Return top</button>
                    }
                    else
                    {
                        @foreach (var item in AnswerList)
                        {
                            <button class="btn-base" @onclick="@(() => AnswerButtonOnClick(item.Id))">@item.Meaning</button>
                        }
                    }
                }
            }
        </div>
        @*<div class="navigation-area">
            @if (Question != null && !IsTest)
            {
                <button class="btn-base" @onclick="@MovePrev"><span class="oi oi-chevron-left"></span></button>
                <button class="btn-base" @onclick="@MoveNext"><span class="oi oi-chevron-right"></span></button>
            }
        </div>*@
    </div>
</div>
@code {
    private List<Level> LevelList = new();
    private List<Vocabulary> VocabularyList = new();
    private List<Word> WordList = new();
    private List<PartOfSpeech> PartOfSpeechList = new();
    private List<Vocabulary> Questions = new();
    private Vocabulary Question = new();
    private List<Vocabulary> AnswerList = new();
    private int Idx = 0;
    private bool? IsPass = null;
    private bool IsEnd = false;
    private bool IsLoad = false;
    [SupplyParameterFromQuery]
    [Parameter]
    public long LevelId { get; set; } = 0;
    [SupplyParameterFromQuery]
    [Parameter]
    public long PartOfSpeechId { get; set; } = 0;
    //[SupplyParameterFromQuery]
    //[Parameter]
    //public string Mode { get; set; } = "";

    //Test mode property
    //private bool IsTest = false;
    //private Timer Timer = new Timer(1000);
    //private TimeSpan LimitTime = TimeSpan.FromSeconds(90);
    //private Dictionary<long, bool> TestResult = new();
    private int TotalAnswerCount = 0;
    private int TotalCorrectCount = 0;
    private int TotalIncorrectCount = 0;

    protected override async Task OnInitializedAsync()
    {
        IsLoad = true;
        LevelList = await Http.GetFromJsonAsync<List<Level>>("Level") ?? new();
        WordList = await Http.GetFromJsonAsync<List<Word>>("Word") ?? new();
        PartOfSpeechList = await Http.GetFromJsonAsync<List<PartOfSpeech>>("PartOfSpeech") ?? new();
        VocabularyList = await Http.GetFromJsonAsync<List<Vocabulary>>("Vocabulary") ?? new();
        if (PartOfSpeechId == 0)
            PartOfSpeechId = PartOfSpeechList.First().Id;
        if (LevelId == 0)
            LevelId = LevelList.First().Id;
        //if (string.IsNullOrEmpty(Mode))
        //    Mode = "練習";
        CreateQuestions();
        //Timer.Elapsed += (s, e) =>
        //{
        //    LimitTime = LimitTime.Subtract(TimeSpan.FromSeconds(1));
        //    if (LimitTime == TimeSpan.Zero)
        //    {
        //        IsEnd = true;
        //        Timer.Stop();
        //    }
        //    StateHasChanged();
        //};
        TotalAnswerCount = await localStorage.GetItemAsync<int>("ALL_COUNT");
        TotalCorrectCount = await localStorage.GetItemAsync<int>("CORRECT_COUNT");
        TotalIncorrectCount = await localStorage.GetItemAsync<int>("IN_CORRECT_COUNT");
        IsLoad = false;
    }

    //private void MovePrev()
    //{
    //    IsEnd = false;
    //    if (Questions.Count == 0) return;
    //    IsPass = null;
    //    Idx = Idx - 1;
    //    if (Idx < 0)
    //    {
    //        Idx = 0;
    //    }
    //    else
    //    {
    //        Question = Questions[Idx];
    //        AnswerList = VocabularyList.GetAnswer(Question).ToList();
    //    }
    //}

    private void MoveNext()
    {
        if (Questions.Count == 0) return;
        IsPass = null;
        Idx = Idx + 1;
        if (Idx >= Questions.Count)
        {
            IsEnd = true;
            Idx = Questions.Count - 1;
            //if (IsTest) Timer.Stop();
        }
        else
        {
            Question = Questions[Idx];
            AnswerList = VocabularyList.GetAnswer(Question).ToList();
        }
    }

    private void ParameterChanged()
    {
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add(nameof(LevelId), LevelId);
        parameters.Add(nameof(PartOfSpeechId), PartOfSpeechId);
        //parameters.Add(nameof(Mode), Mode);
        navigationManager.NavigateTo(navigationManager.GetUriWithQueryParameters(parameters));

    }

    private void LevelChanged(ChangeEventArgs e)
    {
        LevelId = int.Parse(e.Value.ToString());
        ParameterChanged();
        CreateQuestions();
    }

    private void PartOfSpeechChanged(ChangeEventArgs e)
    {
        PartOfSpeechId = int.Parse(e.Value.ToString());
        ParameterChanged();
        CreateQuestions();
    }
    private long prevAnswerId = 0;
    private async Task AnswerButtonOnClick(long id)
    {
        IsPass = null;
        if (prevAnswerId != id)
        {
            prevAnswerId = id;
            TotalAnswerCount++;
            await localStorage.SetItemAsync<int>("ALL_COUNT", TotalAnswerCount);
            if (Question.Id == id)
            {
                TotalCorrectCount++;
                await localStorage.SetItemAsync<int>("CORRECT_COUNT", TotalCorrectCount);
            }
            else
            {
                TotalIncorrectCount++;
                await localStorage.SetItemAsync<int>("IN_CORRECT_COUNT", TotalIncorrectCount);
            }
        }
        //if (IsTest)
        //{
        //    bool testResult = Question.Id == id;
        //    TestResult.Add(Question.Id, testResult);
        //    await sessionStorage.SetItemAsStringAsync("TestResult", JsonConvert.SerializeObject(TestResult));
        //    MoveNext();
        //}
        //else IsPass = Question.Id == id;
        IsPass = Question.Id == id;
        MoveNext();
    }

    //private void ModeChanged(ChangeEventArgs e)
    //{
    //    IsTest = e.Value.ToString() == "試験";
    //    Mode = e.Value.ToString();
    //    ParameterChanged();
    //    CreateQuestions();
    //}

    //private void StartButtonOnClick()
    //{
    //    Timer.Start();
    //}

    private void CreateQuestions()
    {
        IsPass = null;
        Idx = 0;
        //if (IsTest) Questions = VocabularyList.Where(a => a.PartOfSpeechId == PartOfSpeechId && a.LevelId == LevelId).GetQuestions().Take(25).ToList();
        //else Questions = VocabularyList.Where(a => a.PartOfSpeechId == PartOfSpeechId && a.LevelId == LevelId).GetQuestions().ToList();
        Questions = VocabularyList.Where(a => a.PartOfSpeechId == PartOfSpeechId && a.LevelId == LevelId).GetQuestions().ToList();
        if (Questions.Count > 0)
            Question = Questions[Idx];
        else
            Question = new Vocabulary();
        AnswerList = VocabularyList.GetAnswer(Question).ToList();
    }

    private void ReturnButtonOnClick()
    {
        IsEnd = false;
        CreateQuestions();
    }
}
