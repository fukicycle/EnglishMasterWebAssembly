@page "/WordQuestion"
@using EnglishMasterWebAssembly.Shared.Models
@using System.Timers
@using Newtonsoft.Json
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
<PageTitle>Word</PageTitle>
<div class="container">
    <div class="content-area">
        <div class="spinner-area">
            <select @onchange="@LevelChanged">
                @foreach (var item in LevelList)
                {
                    if (LevelId == item.Id)
                    {
                        <option selected value="@item.Id">@item.Name</option>
                    }
                    else
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
            </select>
            <p>品詞</p>
            <select @onchange="@PartOfSpeechChanged">
                @foreach (var item in PartOfSpeechList)
                {
                    if (PartOfSpeechId == item.Id)
                    {
                        <option selected value="@item.Id">@item.InJapanese</option>
                    }
                    else
                    {
                        <option value="@item.Id">@item.InJapanese</option>
                    }
                }
            </select>
        </div>
        <div class="question-area">
            @if (WordList == null || Questions == null)
            {
                <p class="question">Loading...</p>
                <hr />
                <p class="count">0/0</p>
            }
            else
            {
                if (IsEnd)
                {
                    <p class="question">Completed!</p>
                    <p>-</p>
                    <hr />
                    <p class="count">@(Idx + 1)/@Questions.Count</p>
                }
                else if (IsPass == null)
                {
                    <p class="question">@(WordList.FirstOrDefault(a => a.Id == Question.WordId)?.Word1 ?? "No word")</p>
                    <p>-</p>
                    <hr />
                    <p class="count">@(Idx + 1)/@Questions.Count</p>
                }
                else if (IsPass == true)
                {
                    <p class="question">@(WordList.FirstOrDefault(a => a.Id == Question.WordId)?.Word1 ?? "No word")</p>
                    <p class="text-success">Correct !</p>
                    <hr />
                    <p class="count">@(Idx + 1)/@Questions.Count</p>
                }
                else
                {
                    <p class="question">@(WordList.FirstOrDefault(a => a.Id == Question.WordId)?.Word1 ?? "No word")</p>
                    <p class="text-danger">Incorrect !</p>
                    <hr />
                    <p class="count">@(Idx + 1)/@Questions.Count</p>
                }
            }
        </div>
        <div class="answer-area">
            @if (IsLoad)
            {
                <div class="spinner-border"></div>
            }
            else
            {
                @if (Question.WordId != 0)
                {
                    @if (IsEnd)
                    {
                        <button class="btn-base" @onclick="ReturnButtonOnClick">Return top</button>
                    }
                    else
                    {
                        @foreach (var item in AnswerList)
                        {
                            <button class="btn-base" @onclick="@(() => AnswerButtonOnClick(item.Id))" disabled="@(IsPass != null)">@item.Meaning</button>
                        }
                    }
                }
            }
        </div>
    </div>
</div>
@code {
    private List<Level> LevelList = new();
    private List<Vocabulary> VocabularyList = new();
    private List<Word> WordList = new();
    private List<PartOfSpeech> PartOfSpeechList = new();
    private List<Vocabulary> Questions = new();
    private Vocabulary Question = new();
    private List<Vocabulary> AnswerList = new();
    private int Idx = 0;
    private bool? IsPass = null;
    private bool IsEnd = false;
    private bool IsLoad = false;
    [SupplyParameterFromQuery]
    [Parameter]
    public long LevelId { get; set; } = 0;
    [SupplyParameterFromQuery]
    [Parameter]
    public long PartOfSpeechId { get; set; } = 0;

    private int TotalAnswerCount = 0;
    private int TotalCorrectCount = 0;
    private int TotalIncorrectCount = 0;

    protected override async Task OnInitializedAsync()
    {
        IsLoad = true;
        LevelList = await Http.GetFromJsonAsync<List<Level>>("Level") ?? new();
        WordList = await Http.GetFromJsonAsync<List<Word>>("Word") ?? new();
        PartOfSpeechList = await Http.GetFromJsonAsync<List<PartOfSpeech>>("PartOfSpeech") ?? new();
        VocabularyList = await Http.GetFromJsonAsync<List<Vocabulary>>("Vocabulary") ?? new();
        if (PartOfSpeechId == 0)
            PartOfSpeechId = PartOfSpeechList.First().Id;
        if (LevelId == 0)
            LevelId = LevelList.First().Id;
        CreateQuestions();
        TotalAnswerCount = await localStorage.GetItemAsync<int>("ALL_COUNT");
        TotalCorrectCount = await localStorage.GetItemAsync<int>("CORRECT_COUNT");
        TotalIncorrectCount = await localStorage.GetItemAsync<int>("IN_CORRECT_COUNT");
        IsLoad = false;
    }

    private void MoveNext()
    {
        if (Questions.Count == 0) return;
        IsPass = null;
        Idx = Idx + 1;
        if (Idx >= Questions.Count)
        {
            IsEnd = true;
            Idx = Questions.Count - 1;
        }
        else
        {
            Question = Questions[Idx];
            AnswerList = VocabularyList.GetAnswer(Question).ToList();
        }
    }

    private void ParameterChanged()
    {
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add(nameof(LevelId), LevelId);
        parameters.Add(nameof(PartOfSpeechId), PartOfSpeechId);
        navigationManager.NavigateTo(navigationManager.GetUriWithQueryParameters(parameters));

    }

    private void LevelChanged(ChangeEventArgs e)
    {
        LevelId = int.Parse(e.Value.ToString());
        ParameterChanged();
        CreateQuestions();
    }

    private void PartOfSpeechChanged(ChangeEventArgs e)
    {
        PartOfSpeechId = int.Parse(e.Value.ToString());
        ParameterChanged();
        CreateQuestions();
    }
    private long prevAnswerId = 0;
    private async Task AnswerButtonOnClick(long id)
    {
        IsPass = null;
        if (prevAnswerId != id)
        {
            prevAnswerId = id;
            TotalAnswerCount++;
            await localStorage.SetItemAsync<int>("ALL_COUNT", TotalAnswerCount);
            if (Question.Id == id)
            {
                TotalCorrectCount++;
                await localStorage.SetItemAsync<int>("CORRECT_COUNT", TotalCorrectCount);
            }
            else
            {
                TotalIncorrectCount++;
                await localStorage.SetItemAsync<int>("IN_CORRECT_COUNT", TotalIncorrectCount);
            }
        }
        IsPass = Question.Id == id;
        StateHasChanged();
        await Task.Delay(200);
        MoveNext();
    }

    private void CreateQuestions()
    {
        IsPass = null;
        Idx = 0;
        Questions = VocabularyList.Where(a => a.PartOfSpeechId == PartOfSpeechId && a.LevelId == LevelId).GetQuestions().ToList();
        if (Questions.Count > 0)
            Question = Questions[Idx];
        else
            Question = new Vocabulary();
        AnswerList = VocabularyList.GetAnswer(Question).ToList();
    }

    private void ReturnButtonOnClick()
    {
        IsEnd = false;
        CreateQuestions();
    }
}
