@page "/"
@using EnglishMasterWebAssembly.Shared.Models
@inject HttpClient Http
<PageTitle>Question</PageTitle>
<div class="container">
    <div class="spinner-area">
        <p>モード</p>
        <select>
            <option>練習</option>
            <option>試験</option>
        </select>
        <p>品詞</p>
        @if (PartOfSpeechList == null)
        {
            <div class="spinner-border"></div>
        }
        else
        {
            <select onchange="@PartOfSpeechChanged">
                @foreach (var item in PartOfSpeechList)
                {
                    <option value="@item.Id">@item.InJapanese</option>
                }
            </select>
        }
    </div>
    <div class="question-area">
        @if (WordList == null || Questions == null)
        {
            <div class="spinner-border"></div>
        }
        else
        {
            <p class="question">@(WordList.FirstOrDefault(a => a.Id == Question.WordId)?.Word1 ?? "No word")</p>
            <hr />
            <p class="count">@(Idx + 1)/@Questions.Count</p>
        }
    </div>
    <div class="answer-area">
        <button>1</button>
        <button>2</button>
        <button>3</button>
        <button>4</button>
    </div>
    <div class="navigation-area">
        <button @onclick="@MovePrev">&#xE892;</button>
        <button @onclick="@MoveNext">&#xE893;</button>
    </div>
</div>
@code {
    private List<Vocabulary> VocabularyList = null;
    private List<Word> WordList = null;
    private List<PartOfSpeech> PartOfSpeechList = null;
    private List<Vocabulary> Questions = null;
    private Vocabulary Question;
    private int Idx = 0;

    protected override async Task OnInitializedAsync()
    {
        WordList = await Http.GetFromJsonAsync<List<Word>>("Word");
        PartOfSpeechList = await Http.GetFromJsonAsync<List<PartOfSpeech>>("PartOfSpeech");
        VocabularyList = await Http.GetFromJsonAsync<List<Vocabulary>>("Vocabulary");
        Questions = VocabularyList.Where(a => a.PartOfSpeechId == PartOfSpeechList.First().Id).GetQuestions().ToList();
        Question = Questions[Idx];
    }

    private void MovePrev()
    {
        Idx = Idx - 1;
        if (Idx < 0) Idx = 0;
        Question = Questions[Idx];
    }

    private void MoveNext()
    {
        Idx = Idx + 1;
        if (Idx > VocabularyList.Count) Idx = VocabularyList.Count;
        Question = Questions[Idx];
    }

    private void PartOfSpeechChanged(ChangeEventArgs e)
    {
        Idx = 0;
        Questions = VocabularyList.Where(a => a.PartOfSpeechId == int.Parse(e.Value.ToString())).GetQuestions().ToList();
        if (Questions.Count > 0)
            Question = Questions[Idx];
        else
            Question = new Vocabulary();
    }
}