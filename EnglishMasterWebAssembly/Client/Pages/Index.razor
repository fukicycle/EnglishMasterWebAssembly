@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient http
@inject NavigationManager navigationManager
@using EnglishMasterWebAssembly.Shared.Models
@using Microsoft.AspNetCore.WebUtilities
<PageTitle>Menu</PageTitle>
<div class="wave-area">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 200" width="1200" height="200">
        <defs>
            <path d="M 0,0 v 100,0 q 150,50 300,0 t 300,0 q 150,50 300,0 t 300,0 v 0,-100 Z" id="wave" />
        </defs>
        <use xlink:href="#wave" />
        <use xlink:href="#wave" x="-30" y="10" />
        <use xlink:href="#wave" x="-60" />
    </svg>
    <div class="p-1" style="transform:translateY(-50px);">
        @if (_isLoading)
        {
            <div class="w-100 d-flex justify-content-center">
                <div class="spinner-border"></div>
            </div>
        }
        else if (_fullName.Equals("Guest"))
        {
            <div class="d-flex">
                <h3 class="m-auto">Welcome back, @_fullName !</h3>
                <button class="m-auto px-1 btn-base w-25 py-1" @onclick="NavigateToLoginPage">Sign in</button>
            </div>
            <div class="p-1">Sign in to see all results.</div>
        }
        else
        {
            <h3>Welcome back, @_fullName !</h3>
            <button class="btn-base" @onclick="SignOutButtonOnClick">Sign out</button>
            <div class="p-1">
            </div>
        }
    </div>
</div>
@code {
    private bool _isLoading = true;
    private string _fullName = "Guest";
    protected override async Task OnInitializedAsync()
    {
        var user = await UserInfo.GetUserInfo(localStorage, http);
        _fullName = string.IsNullOrEmpty(user?.Username) ? "Guest" : $"{user.FirstName} {user.LastName}";
        _isLoading = false;
    }

    private void NavigateToLoginPage()
    {
        var queryParameter = new Dictionary<string, string>
            {
                ["RedirectURL"] = navigationManager.Uri
            };
        navigationManager.NavigateTo(QueryHelpers.AddQueryString("Login", queryParameter));
    }

    private async void SignOutButtonOnClick()
    {
        await localStorage.SetItemAsync<long>("USER_ID", 0);
        navigationManager.NavigateTo(navigationManager.BaseUri, true);
    }
}
