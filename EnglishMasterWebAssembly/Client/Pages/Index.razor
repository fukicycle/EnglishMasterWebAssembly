@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient http
@inject NavigationManager navigationManager
@using EnglishMasterWebAssembly.Shared.Models
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Menu</PageTitle>
<div class="wave-area">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 200" width="1200" height="200">
        <defs>
            <path d="M 0,0 v 100,0 q 150,50 300,0 t 300,0 q 150,50 300,0 t 300,0 v 0,-100 Z" id="wave" />
        </defs>
        <use xlink:href="#wave" />
        <use xlink:href="#wave" x="-30" y="10" />
        <use xlink:href="#wave" x="-60" />
    </svg>
    <div class="p-1" style="transform:translateY(-50px);">
        @if (_isLoading)
        {
            <div class="w-100 d-flex justify-content-center">
                <div class="p-5">
                    <svg class="spinner" width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                        <circle class="path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
                    </svg>
                </div>
            </div>
        }
        else if (_fullName.Equals("Guest"))
        {
            <div class="d-flex">
                <div class="fs-3 fw-bold m-auto">Welcome back, @_fullName !</div>
                <button class="m-auto px-1 btn-base w-25 py-1" @onclick="NavigateToLoginPage">Sign in</button>
            </div>
            <div class="p-1">Sign in to see all results.</div>
            <div class="p-1">If you join our ranking, you have to sign in!</div>
        }
        else
        {
            <div class="fs-3 fw-bold">Welcome back, @_fullName !</div>
            <div class="p-1">
                <table class="table table-borderless p-0 m-0">
                    <thead>
                        <tr class="text-center">
                            <th>Total</th>
                            <th>CR</th>
                            <th>WP</th>
                            <th>Weekly rank</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="text-center">
                            <td>@_summary.Sum(a => a.Total)</td>
                            @if (_summary.Sum(a => a.Total) != 0)
                            {
                                <td>@Math.Round((decimal)_summary.Sum(a => a.Correct) / _summary.Sum(a => a.Total) * 100m, 2) %</td>
                            }
                            else
                            {
                                <td>-</td>
                            }
                            <td>@_rank?.Point pt</td>
                            @if (_rank?.Ranking == 0)
                            {
                                <td>-</td>
                            }
                            else
                            {
                                <td>@_rank?.Ranking</td>
                            }
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="p-1">
                <div class="fs-5 fw-bold">Ranking - @_startDate?.ToString("MM/dd") ~ @_endDate?.ToString("MM/dd") </div>
                <div class="p-1">
                    @foreach (var item in _ranks)
                    {
                        <div class="d-flex pt-1">

                            <div class="fs-4 fw-bold">@item.Ranking</div>
                            <div class="fs-5 fw-bold m-auto mx-2">@item.Nickname</div>
                            @*<div class="fs-5 m-auto mx-1">- @item.CorrectRate %</div>*@
                            <div class="fs-5 m-auto mx-1">@item.Point pt</div>
                            @switch (item.Ranking)
                            {
                                case 1:
                                    <div class="fs-5 m-auto mx-1">&#x1f947;</div>
                                    break;
                                case 2:
                                    <div class="fs-5 m-auto mx-1">&#x1f948;</div>
                                    break;
                                case 3:
                                    <div class="fs-5 m-auto mx-1">&#x1f949;</div>
                                    break;
                                default:
                                    <div class="fs-5 m-auto"></div>
                                    break;
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code
{
    private bool _isLoading = true;
    private string _fullName = "Guest";
    private List<Summary> _summary = new();
    private List<Rank> _ranks = new();
    private Rank _rank = new();
    private DateTime _today = DateTime.Today;
    private DateTime? _startDate;
    private DateTime? _endDate;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserInfo.GetUserInfo(localStorage, http);
        _fullName = string.IsNullOrEmpty(user?.Username) ? "Guest" : $"{user.FirstName} {user.LastName}";
        _summary = await http.GetFromJsonAsync<List<Summary>>(nameof(MeaningOfWordLearningHistory) + $"/summary?userId={user?.Id}") ?? new();
        _isLoading = false;
        CalcCurrentWeek();
        _ranks = await http.GetFromJsonAsync<List<Rank>>(nameof(Rank) + $"?start={_startDate:yyyy-MM-dd}&end={_endDate:yyyy-MM-dd}") ?? new();
        _rank = await http.GetFromJsonAsync<Rank>(nameof(Rank) + $"/{user?.Id}?start={_startDate:yyyy-MM-dd}&end={_endDate:yyyy-MM-dd}") ?? new();
    }

    private void NavigateToLoginPage()
    {
        var queryParameter = new Dictionary<string, string>
        {
            ["RedirectURL"] = navigationManager.Uri
        };
        navigationManager.NavigateTo(QueryHelpers.AddQueryString("Login", queryParameter));
    }

    private void CalcCurrentWeek()
    {
        var today = DateTime.Today;
        var index = typeof(DayOfWeek).GetEnumNames().ToList().IndexOf(today.DayOfWeek.ToString());
        var startDate = today.AddDays(-index);
        var endDate = today.AddDays(6 - index);
        _startDate = startDate;
        _endDate = endDate;
        StateHasChanged();
    }
}