@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient http
@inject NavigationManager navigationManager
@using EnglishMasterWebAssembly.Shared.Models
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Menu</PageTitle>
<div class="wave-area">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 200" width="1200" height="200">
        <defs>
            <path d="M 0,0 v 100,0 q 150,50 300,0 t 300,0 q 150,50 300,0 t 300,0 v 0,-100 Z" id="wave" />
        </defs>
        <use xlink:href="#wave" />
        <use xlink:href="#wave" x="-30" y="10" />
        <use xlink:href="#wave" x="-60" />
    </svg>
    <div class="p-1" style="transform:translateY(-50px);">
        @if (_isLoading)
        {
            <div class="w-100 d-flex justify-content-center">
                <div class="p-5">
                    <svg class="spinner" width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                        <circle class="path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
                    </svg>
                </div>
            </div>
        }
        else if (_fullName.Equals("Guest"))
        {
            <div class="d-flex">
                <h3 class="m-auto">Welcome back, @_fullName !</h3>
                <button class="m-auto px-1 btn-base w-25 py-1" @onclick="NavigateToLoginPage">Sign in</button>
            </div>
            <div class="p-1">Sign in to see all results.</div>
        }
        else
        {
            <h3>Welcome back, @_fullName !</h3>
            <div class="p-1">
                <div class="spinner-area">
                    <p>Month:</p>
                    <select>
                        @foreach (var item in _summary.GroupBy(a => a.Date.ToString("yyyy-MM")))
                        {
                            <option>@item.Key</option>
                        }
                    </select>
                </div>
                <div class="row p-0 w-100">
                    <div class="col-4">Total:</div>
                    <div class="col-8">@_summary.Where(a => a.Date.Year == 2023 && a.Date.Month == 5).Sum(a => a.Total)</div>
                </div>
                <div class="row p-0 w-100">
                    <div class="col-4">Correct:</div>
                    <div class="col-8">@_summary.Where(a => a.Date.Year == 2023 && a.Date.Month == 5).Sum(a => a.Correct)</div>
                </div>
                <div class="row p-0 w-100">
                    <div class="col-4">Incorrect:</div>
                    <div class="col-8">@_summary.Where(a => a.Date.Year == 2023 && a.Date.Month == 5).Sum(a => a.Incorrect)</div>
                </div>
            </div>
        }
        <div class="p-1">
            <div>Ranking - @_today.ToString("MMMM/yyyy")</div>
            <div class="p-1">
                @foreach (var item in _ranks)
                {
                    <div class="d-flex p-1">
                        <div class="fs-2 fw-bold">@item.Ranking</div>
                        <div class="fs-4 fw-bold m-auto mx-2">@item.Nickname</div>
                        <div class="fs-5 m-auto mx-1">- @item.Count questions</div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code
{
    private bool _isLoading = true;
    private string _fullName = "Guest";
    private List<Summary> _summary = new();
    private List<Rank> _ranks = new();
    private DateTime _today = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserInfo.GetUserInfo(localStorage, http);
        _fullName = string.IsNullOrEmpty(user?.Username) ? "Guest" : $"{user.FirstName} {user.LastName}";
        _summary = await http.GetFromJsonAsync<List<Summary>>(nameof(MeaningOfWordLearningHistory) + $"/summary?userId={user?.Id}") ?? new();
        _ranks = await http.GetFromJsonAsync<List<Rank>>(nameof(Rank) + $"?year={_today.Year}&month={_today.Month}") ?? new();
        _isLoading = false;
    }

    private void NavigateToLoginPage()
    {
        var queryParameter = new Dictionary<string, string>
        {
            ["RedirectURL"] = navigationManager.Uri
        };
        navigationManager.NavigateTo(QueryHelpers.AddQueryString("Login", queryParameter));
    }
}