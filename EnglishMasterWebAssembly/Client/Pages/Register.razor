@page "/register"
@using EnglishMasterWebAssembly.Shared.Models
@using Newtonsoft.Json
@inject HttpClient http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
<div class="m-auto h-100 d-flex justify-content-center align-items-center" style="max-width:500px;">
    <div class="p-3">
        <h3>Fill in the blanks!</h3>
        <div class="row mb-2">
            <div class="col-4 my-auto">Username:</div>
            <div class="col-8">
                <input class="form-control" type="text" placeholder="taylor1989" @bind="Username" />
            </div>
        </div>
        <div class="row mb-2">
            <div class="col-4 my-auto">First name:</div>
            <div class="col-8">
                <input class="form-control" type="text" placeholder="Taylor" @bind="FirstName" />
            </div>
        </div>
        <div class="row mb-2">
            <div class="col-4 my-auto">Last name:</div>
            <div class="col-8">
                <input class="form-control" type="text" placeholder="Swift" @bind="LastName" />
            </div>
        </div>
        <div class="row mb-2">
            <div class="col-4 my-auto">Password:</div>
            <div class="col-8">
                <input class="form-control" type="password" placeholder="P@ssWord" @bind="Password" />
            </div>
        </div>
        <div class="row mb-2">
            <div class="col-4 my-auto">Retype:</div>
            <div class="col-8">
                <input class="form-control" type="password" placeholder="P@ssWord" @bind="RePassword" />
            </div>
        </div>
        @*このしたのコメントは後ほど追加する機能のため消さない*@
        @*<div class="row mb-2">
                <div class="col-4 my-auto">
                    <div>Icon:</div>
                    <div class="small">optional</div>
                </div>
                <div class="col-8 my-auto">
                    <InputFile class="form-control"></InputFile>
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-4 my-auto"></div>
                <div class="col-8">
                    <img class="w-50" style="aspect-ratio:1/1;" alt="icon" src="icon-192.png" />
                </div>
            </div>*@
        <div class="row">
            <button class="btn-base col-12" @onclick="SubmitUser">Submit</button>
        </div>
        <div class="row">
            <div class="alert-danger">@_errorMsg</div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string? RedirectURL { get; set; }
    public string Username { get; set; } = null!;
    public string Password { get; set; } = null!;
    public string RePassword { get; set; } = null!;
    public string FirstName { get; set; } = null!;
    public string LastName { get; set; } = null!;

    private string _errorMsg = "";

    public async void SubmitUser()
    {
        _errorMsg = "";
        User user = new User
        {
            Username = Username,
            FirstName = FirstName,
            LastName = LastName,
            Password = Password
        };
        if (user.Username == string.Empty) _errorMsg = "Username field is empty.";
        else if (user.FirstName == string.Empty) _errorMsg = "First name field is empty.";
        else if (user.LastName == string.Empty) _errorMsg = "Last name field is empty.";
        else if (user.Password == string.Empty) _errorMsg = "Password field is empty.";
        else if (RePassword == string.Empty) _errorMsg = "Re password field is emtpy.";
        else if (user.Password != RePassword) _errorMsg = "Password is mismatch.";
        if (_errorMsg != string.Empty) return;
        HttpContent content = new StringContent(JsonConvert.SerializeObject(user), System.Text.Encoding.UTF8, "application/json");
        HttpResponseMessage response = await http.PostAsync("user/post/new", content);
        var result = await response.Content.ReadAsStringAsync();
        if (long.TryParse(result, out long userId) == false)
        {
            if (result is not null) _errorMsg = result;
            else _errorMsg = "Unexpected error has occured.";
            StateHasChanged();
        }
        else
        {
            await localStorage.SetItemAsync<long>("USER_ID", userId);
            if (RedirectURL is not null)
            {
                navigationManager.NavigateTo(RedirectURL, true);
            }
            else
            {
                navigationManager.NavigateTo(navigationManager.BaseUri, true);
            }
        }
    }
}
