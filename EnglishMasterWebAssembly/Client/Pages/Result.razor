@page "/result"
@using Newtonsoft.Json
@using EnglishMasterWebAssembly.Shared.Models
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient http
<div class="result-area">
    <h3>Result</h3>
    <p>Answer count: @_resultList.Count/25</p>
    <p>Incorrect count: @_resultList.Count(a => a.Value == false)</p>
    <p>Correct count: @_resultList.Count(a => a.Value)</p>
    @if (_resultList.Count(a => a.Value) == 25)
    {
        <h4 class="text-success">Excellent!</h4>
    }
    else if (_resultList.Count(a => a.Value) >= 23)
    {
        <h4 class="text-info">Good!</h4>
    }
    else if (_resultList.Count(a => a.Value) <= 10)
    {
        <h4 class="text-danger">Bad...</h4>
    }
    else
    {
        <h4 class="text-secondary">Normal</h4>
    }
</div>
<div class="detail-area">
    @foreach (var item in _resultList.Where(a => a.Value == false))
    {
        var vocaburary = _meaningOfWordList.First(a => a.Id == item.Key);
        var word = _wordList.First(a => a.Id == vocaburary.WordId);
        <div class="header">@word.Word1</div>
        <div class="contents">@vocaburary.Meaning</div>
    }
</div>
@code {
    private List<MeaningOfWord> _meaningOfWordList = new();
    private List<Word> _wordList = new();
    private Dictionary<long, bool> _resultList = new();
    protected override async Task OnInitializedAsync()
    {
        _wordList = await http.GetFromJsonAsync<List<Word>>("Word") ?? new();
        _meaningOfWordList = await http.GetFromJsonAsync<List<MeaningOfWord>>("MeaningOfWord") ?? new();
        _resultList = JsonConvert.DeserializeObject<Dictionary<long, bool>>(await sessionStorage.GetItemAsStringAsync("Result"));
    }
}

