@page "/idiomQuestion"
@using EnglishMasterWebAssembly.Shared.Models
@using System.Timers
@using Newtonsoft.Json
@inject HttpClient http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
<PageTitle>Idiom</PageTitle>
<div class="container">
    <div class="content-area">
        @*@if (!IsTest)
            {
                <div class="achivement-area">
                    <p class="text-primary">@TotalAnswerCount</p>
                    <p class="text-success">@TotalCorrectCount</p>
                    <p class="text-danger">@TotalIncorrectCount</p>
                </div>
            }*@
        <div class="spinner-area">
            <p>モード</p>
            @*<select @onchange="@ModeChanged" disabled="@Timer.Enabled">*@
            <select disabled @onchange="@ModeChanged">
                <option>練習</option>
                <option>試験</option>
            </select>
        </div>
        <div class="question-area">
            @if (_idiomList == null || _questions == null)
            {
                <p class="question">Loading...</p>
                <hr />
                <p class="count">0/0</p>
            }
            else
            {
                if (_isEnd)
                {
                    <p class="question">Completed!</p>
                    <p>-</p>
                    <hr />
                    <p class="count">@(_idx + 1)/@_questions.Count</p>
                }
                else if (_isPass == null)
                {
                    if (_isTest)
                    {
                        if (_timer.Enabled)
                        {
                            <p class="question">@(_idiomList.FirstOrDefault(a => a.Id == _question.IdiomId)?.Idiom1 ?? "No word")</p>
                            <p>@_limitTime.ToString(@"mm\:ss")</p>
                            <hr />
                            <p class="count">@(_idx + 1)/@_questions.Count</p>
                        }
                        else
                        {
                            <p class="question">Please click the start!</p>
                            <p>@_limitTime.ToString(@"mm\:ss")</p>
                            <hr />
                            <p class="count">@(_idx + 1)/@_questions.Count</p>

                        }
                    }
                    else
                    {
                        <p class="question">@(_idiomList.FirstOrDefault(a => a.Id == _question.IdiomId)?.Idiom1 ?? "No word")</p>
                        <p>-</p>
                        <hr />
                        <p class="count">@(_idx + 1)/@_questions.Count</p>
                    }
                }
                else if (_isPass == true)
                {
                    <p class="question">@(_idiomList.FirstOrDefault(a => a.Id == _question.IdiomId)?.Idiom1 ?? "No word")</p>
                    <p class="text-success">Correct !</p>
                    <hr />
                    <p class="count">@(_idx + 1)/@_questions.Count</p>
                }
                else
                {
                    <p class="question">@(_idiomList.FirstOrDefault(a => a.Id == _question.IdiomId)?.Idiom1 ?? "No word")</p>
                    <p class="text-danger">Incorrect !</p>
                    <hr />
                    <p class="count">@(_idx + 1)/@_questions.Count</p>
                }
            }
        </div>
        <div class="answer-area">
            @if (_question.IdiomId == 0)
            {
                <div class="spinner-border"></div>
            }
            else
            {
                @if (_isTest && !_isEnd && !_timer.Enabled)
                {
                    <button class="btn-base" @onclick="StartButtonOnClick">Start</button>
                }
                else if (!_isEnd)
                {
                    @foreach (var item in _answerList)
                    {
                        <button class="btn-base" @onclick="@(() => AnswerButtonOnClick(item.Id))">@item.Meaning</button>
                    }
                }
                else
                {
                    if (_isTest)
                    {
                        <button class="btn-base" @onclick="@(() => navigationManager.NavigateTo("./Result"))">Show Result</button>
                    }
                    else
                    {
                        <button class="btn-base" @onclick="ReturnButtonOnClick">Return top</button>
                    }
                }
            }
        </div>
        <div class="navigation-area">
            @if (_question != null && !_isTest)
            {
                <button class="btn-base" @onclick="@MovePrev"><span class="oi oi-chevron-left"></span></button>
                <button class="btn-base" @onclick="@MoveNext"><span class="oi oi-chevron-right"></span></button>
            }
        </div>
    </div>
</div>
@code {
    private List<MeaningOfIdiom> _meaningOfIdiomList = new();
    private List<Idiom> _idiomList = new();
    private List<MeaningOfIdiom> _questions = new();
    private MeaningOfIdiom _question = new();
    private List<MeaningOfIdiom> _answerList = new();
    private int _idx = 0;
    private bool? _isPass = null;
    private bool _isEnd = false;

    //Test mode property
    private bool _isTest = false;
    private Timer _timer = new Timer(1000);
    private TimeSpan _limitTime = TimeSpan.FromSeconds(90);
    private Dictionary<long, bool> _testResult = new();
    private int _totalAnswerCount = 0;
    private int _totalCorrectCount = 0;
    private int _totalIncorrectCount = 0;

    protected override async Task OnInitializedAsync()
    {
        _idiomList = await http.GetFromJsonAsync<List<Idiom>>("Idiom") ?? new();
        _meaningOfIdiomList = await http.GetFromJsonAsync<List<MeaningOfIdiom>>("MeaningOfIdiom") ?? new();
        _questions = _meaningOfIdiomList.GetQuestions().ToList() ?? new();
        _question = _questions[_idx];
        _answerList = _meaningOfIdiomList.GetAnswer(_question).ToList();
        _timer.Elapsed += (s, e) =>
        {
            _limitTime = _limitTime.Subtract(TimeSpan.FromSeconds(1));
            if (_limitTime == TimeSpan.Zero)
            {
                _isEnd = true;
                _timer.Stop();
            }
            StateHasChanged();
        };
        _totalAnswerCount = await localStorage.GetItemAsync<int>("ALL_COUNT");
        _totalCorrectCount = await localStorage.GetItemAsync<int>("CORRECT_COUNT");
        _totalIncorrectCount = await localStorage.GetItemAsync<int>("IN_CORRECT_COUNT");
    }

    private void MovePrev()
    {
        _isEnd = false;
        if (_questions.Count == 0) return;
        _isPass = null;
        _idx = _idx - 1;
        if (_idx < 0)
        {
            _idx = 0;
        }
        else
        {
            _question = _questions[_idx];
            _answerList = _meaningOfIdiomList.GetAnswer(_question).ToList();
        }
    }

    private void MoveNext()
    {
        if (_questions.Count == 0) return;
        _isPass = null;
        _idx = _idx + 1;
        if (_idx >= _questions.Count)
        {
            _isEnd = true;
            _idx = _questions.Count - 1;
            if (_isTest) _timer.Stop();
        }
        else
        {
            _question = _questions[_idx];
            _answerList = _meaningOfIdiomList.GetAnswer(_question).ToList();
        }
    }

    private long prevAnswerId = 0;
    private async Task AnswerButtonOnClick(long id)
    {
        _isPass = null;
        if (prevAnswerId != id)
        {
            prevAnswerId = id;
            _totalAnswerCount++;
            await localStorage.SetItemAsync<int>("ALL_COUNT", _totalAnswerCount);
            if (_question.Id == id)
            {
                _totalCorrectCount++;
                await localStorage.SetItemAsync<int>("CORRECT_COUNT", _totalCorrectCount);
            }
            else
            {
                _totalIncorrectCount++;
                await localStorage.SetItemAsync<int>("IN_CORRECT_COUNT", _totalIncorrectCount);
            }
        }
        if (_isTest)
        {
            bool testResult = _question.Id == id;
            _testResult.Add(_question.Id, testResult);
            await sessionStorage.SetItemAsStringAsync("TestResult", JsonConvert.SerializeObject(_testResult));
            MoveNext();
        }
        else _isPass = _question.Id == id;
    }

    private void ModeChanged(ChangeEventArgs e)
    {
        _isTest = e.Value.ToString() == "試験";
        CreateQuestions();
    }

    private void StartButtonOnClick()
    {
        _timer.Start();
    }

    private void CreateQuestions()
    {
        _isPass = null;
        _idx = 0;
        if (_isTest) _questions = _meaningOfIdiomList.GetQuestions().Take(25).ToList();
        else _questions = _meaningOfIdiomList.GetQuestions().ToList();
        if (_questions.Count > 0)
            _question = _questions[_idx];
        else
            _question = new MeaningOfIdiom();
        _answerList = _meaningOfIdiomList.GetAnswer(_question).ToList();
    }

    private void ReturnButtonOnClick()
    {
        _isEnd = false;
        CreateQuestions();
    }
}
